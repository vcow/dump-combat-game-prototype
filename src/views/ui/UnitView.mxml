<?xml version="1.0" encoding="utf-8"?>

<!-- UI юнита -->

<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:modal="views.modal.*"
        xmlns:ui="views.ui.*"
        xmlns:dropDownList="com.flextras.mobile.dropDownList.*"
        creationComplete="creationCompleteHandler(event)"
        currentState="soldier">
    <s:states>
        <s:State name="soldier"/>
        <s:State name="unit"/>
    </s:states>
    
	<s:layout>
		<s:VerticalLayout paddingLeft="10" paddingRight="10" paddingTop="15" paddingBottom="15" horizontalAlign="center"/>
	</s:layout>
    
    <s:navigationContent>
        <s:Button label="&lt;" click="{goBack();}"/>
    </s:navigationContent>
    
    <s:BorderContainer width="100%" cornerRadius="4">
        <s:layout>
            <s:VerticalLayout paddingLeft="10" paddingRight="10" paddingTop="5" paddingBottom="10" horizontalAlign="center" gap="7"/>
        </s:layout>
        
        <s:Label text="@Resource(key='army.unit.soldier.weapon', bundle='common')" text.unit="@Resource(key='army.unit.weapon', bundle='common')"/>
        
        <s:DataGroup width="100%" dataProvider="{weaponData}">
            <s:layout>
                <s:VerticalLayout gap="6"/>
            </s:layout>
            <s:itemRenderer>
                <fx:Component>
                    <s:DataRenderer creationComplete="creationCompleteHandler(event)" width="100%">
                        <s:layout>
                            <s:VerticalLayout horizontalAlign="center" gap="3"/>
                        </s:layout>
                        <dropDownList:DropDownList id="weaponSelector" width="100%" dataProvider="{_list}" change="changeHandler(event)"/>
                        <s:Button label="@Resource(key='army.unit.reload', bundle='common')" enabled="{_reloadable}"
                                  width="150" click="reload_clickHandler(event)"/>
                        <fx:Script>
                            <![CDATA[
                                import mx.collections.ArrayCollection;
                                import mx.events.FlexEvent;
                                
                                import spark.events.IndexChangeEvent;
                                
                                [Bindable]
                                private var _list:ArrayCollection;
                                
                                [Bindable]
                                private var _reloadable:Boolean;
                                
                                override public function set data(value:Object):void
                                {
                                    super.data = value;
                                    
                                    _list = data ? data.list : null;
                                    
                                    if (initialized)
                                        updateWeapon();
                                }
                                
                                protected function creationCompleteHandler(event:FlexEvent):void
                                {
                                    updateWeapon();
                                }
                                
                                private function updateWeapon():void
                                {
                                    if (data && data.list)
                                    {
                                        for (var i:int = 0; i < data.list.length; i++)
                                        {
                                            if (data.selected == data.list[i].id)
                                            {
                                                weaponSelector.selectedIndex = i;
                                                weaponSelector.label = data.list[i].label;
                                                
                                                _reloadable = data.list[i].loadable;
                                                break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        weaponSelector.label = "";
                                    }
                                }
                                
                                protected function changeHandler(event:IndexChangeEvent):void
                                {
                                    _reloadable = weaponSelector.selectedItem.loadable;
                                    data.selected = weaponSelector.selectedItem.id;
                                    dispatchEvent(new Event("weaponSelectChanged", true));
                                }
                                
                                protected function reload_clickHandler(event:MouseEvent):void
                                {
                                    dispatchEvent(new Event("weaponReload", true));
                                }
                                
                                protected function impove_clickHandler(event:MouseEvent):void
                                {
                                    dispatchEvent(new Event("weaponImprove", true));
                                }
                            ]]>
                        </fx:Script>
                    </s:DataRenderer>
                </fx:Component>
            </s:itemRenderer>
        </s:DataGroup>
    </s:BorderContainer>
    
    <s:VGroup horizontalAlign="center" width="100%">
        
    </s:VGroup>
    
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("common")]
        
        [Event(name="selectWeapon", type="events.UnitEvent")]
        [Event(name="selectArmor", type="events.UnitEvent")]
        [Event(name="chargeWeapon", type="events.UnitEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
            import spark.events.PopUpEvent;
            import mx.managers.PopUpManager;
            import mx.core.FlexGlobals;
            import dictionary.Const;
            import views.modal.ChargeWeaponPopUp;
            import dictionary.ArmamentDict;
            import vo.WeaponDescVO;
            import vo.WeaponVO;
            import events.UnitEvent;
            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;
            
            import facade.ProtoFacade;
            
            import mediator.UnitMediator;
            
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
            private var _unitMediator:UnitMediator;
            
            private var _weaponData:ArrayCollection;
            
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
            [Bindable (event="weaponDataChanged")]
            private function get weaponData():ArrayCollection
            {
                return _weaponData;
            }
            
            //--------------------------------------------------------------------------
            // 
            //--------------------------------------------------------------------------
            
            public function goBack():void
            {
                navigator.popView();
            }
            
            public function get unitId():String
            {
                return data.toString();
            }
            
            public function updateUnit():void
            {
                if (initialized)
                {
                    if (_unitMediator)
                    {
                        _unitMediator.unitId = unitId;
                        
                        currentState = _unitMediator.isSoldier ? "soldier" : "unit";
                        title = _unitMediator.unitName;
                        
                        updateWeapons();
                    }
                }
            }
            
            private function updateWeapons():void
            {
                var data:Array = [];
                
                if (_unitMediator && _unitMediator.unitDesc)
                {
                    for (var i:int = 0; i < _unitMediator.unitDesc.unitWeaponSlots; i++)
                    {
                        var weapon:WeaponVO = _unitMediator.getWeapon(i);
                        var list:ArrayCollection = _unitMediator.getAvailableWeaponFor(i);
                        
                        list.addItemAt({
                            id: "",
                            label: resourceManager.getString("common", _unitMediator.isSoldier ? "army.unit.soldier.notarmed" : "army.unit.notarmed"),
                            loadable: false
                        }, 0);
                        
                        data.push({
                            selected: weapon ? weapon.weaponId : "",
                            list: list,
                            number: i
                        });
                    }
                }
                
                _weaponData = new ArrayCollection(data);
                dispatchEvent(new Event("weaponDataChanged"));
            }
            
            private function weaponSelectChangedHandler(event:Event):void
            {
                event.stopPropagation();
                var data:Object = event.target.data;
                
                var weapon:WeaponDescVO = ArmamentDict.getInstance().getWeapon(data.selected);
                var slot:Vector.<int> = weapon ? weapon.weaponSlot.slice() : new Vector.<int>();
                if (slot.length == 0)
                    slot.push(data.number);
                
                dispatchEvent(new UnitEvent(UnitEvent.SELECT_WEAPON, data.selected, 1, slot, data.selected));
            }
            
            private function weaponReloadHandler(event:Event):void
            {
                event.stopPropagation();
                var data:Object = event.target.data;
                
                var weapon:WeaponDescVO = ArmamentDict.getInstance().getWeapon(data.selected);
                
                if (!weapon)
                    return;
                
                var chargeWeaponPopUp:ChargeWeaponPopUp = new ChargeWeaponPopUp();
                chargeWeaponPopUp.addEventListener(PopUpEvent.CLOSE, chargePopUp_closeHandler);
                
                chargeWeaponPopUp.weaponName = weapon.resourceDesc ? weapon.resourceDesc.resourceName : Const.NO_TEXT;
                chargeWeaponPopUp.clip = weapon.weaponClip;
                chargeWeaponPopUp.ammoList = _unitMediator.getAmmoFor(data.selected);
                
                chargeWeaponPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                PopUpManager.centerPopUp(chargeWeaponPopUp);
            }
            
            private function chargePopUp_closeHandler(event:PopUpEvent):void
            {
                var chargeWeaponPopUp:ChargeWeaponPopUp = ChargeWeaponPopUp(event.target);
                chargeWeaponPopUp.removeEventListener(PopUpEvent.CLOSE, chargePopUp_closeHandler);
                
                if (event.data == Const.OK)
                {
                    
                }
            }
            
            //----------------------------------
            //  View
            //----------------------------------
			
            override public function set data(value:Object):void
            {
                super.data = value;
                
                updateUnit();
            }
            
            protected function creationCompleteHandler(event:FlexEvent):void
            {
                addEventListener("weaponSelectChanged", weaponSelectChangedHandler, false, 0, true);
                addEventListener("weaponReload", weaponReloadHandler, false, 0, true);
                
                _unitMediator = UnitMediator(ProtoFacade.getInstance().retrieveMediator(UnitMediator.NAME));
                _unitMediator.setViewComponent(this);
                
                updateUnit();
            }
            
        ]]>
	</fx:Script>
</s:View>
