<?xml version="1.0" encoding="utf-8"?>
<questsDict>
	<!-- Стартовый квест -->
	<questDesc id="startQuest" name="{start.quest.title}" description="{start.quest.description}">
	
		<!-- Шаг квеста имеет следующие параметры:
			label={строковое значение} - уникальный идентификатор метки, служит для создания условных переходов и циклов в сценарии
		Шаг содержит действия, выполняемые на этом этапе, условия завершения и награду, которая выдается в начале и по завершении шага -->
		<step>
			<!-- Награда, которая выдается при переходе на этот шаг -->
			<result>
				<!-- Выдать юзеру начальную базу в виде руин -->
				<giveBase id="4C3AC134-B7EF-4360-9915-39A6FB231071" asRuin="true"/>
				<!-- Запустить квест на обучение -->
				<giveQuest id="tutorialQuest"/>
			</result>
			<!-- Цели шага -->
			<stepTargets>
				<!-- Цель шага содержит в себе условие выполнения и награду, которую юзер получает по выполнении -->
				<stepTarget>
					<!-- Шаг завершится, как только будет создана хоть одна база -->
					<condition>
						<if>
							<trigger>basesCount</trigger>
							<min type="int">1</min>
						</if>
					</condition>
					<!-- Загрузить в склады начальные ресурсы и выставить соответствующие триггеры -->
					<result>
						<!-- Начальное содержимое складов -->
						<price>
							<resource id="cash" count="10"/>
							<resource id="food" count="500"/>
						</price>
						<!-- Захвачена одна (начальная) база -->
						<trigger id="capturedBases" value="1" type="set"/>
						<!-- Считать начальную базу захваченой -->
						<trigger id="centralTaken" value="1" type="set"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
		<step>
			<result>
				<!-- Для таймаута поддерживаются следующие параметры:
					delay=[{количество милисекунд},{время в формате ##h##m##s}] - время таймаута
					async=["true","false"] - флаг, указывающий таймеру выполняться асинхронно, если false, шаг ожидает окончания таймаута.
					В качестве дочернего элемента таймаут может содержать результат, который будет применен по окончании таймаута. -->
				<timeout delay="5m">
					<result>
						<trigger id="startQuestDelay1Out" value="1" type="set"/>
					</result>
				</timeout>
			</result>
			<stepTargets>
				<stepTarget>
					<!-- По прошествии 5 минут с вероятностью 30% в минуту выдать квест на первую вражескую базу -->
					<condition>
						<and>
							<if>
								<trigger>startQuestDelay1Out</trigger>
							</if>
							<if>
								<trigger>minutesLeft</trigger>
							</if>
							<random type="float">0.3</random>
						</and>
					</condition>
					<result>
						<!-- Выдача юзеру нового квеста поддерживает следующие параметры:
							id={строковое значение} - уникальный идентификатор квеста
							asSubquest=["true","false"] - флаг, указывающий выдавать квест как подквест, т. е. выполнение
								текущего квеста не продолжится вплоть до завершения выдаваемого (дочернего) -->
						<giveQuest id="firstEnemyBaseQuest" asSubquest="true"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
		<step>
			<!-- Игра завершена -->
			<result>
				<gameOver/>
			</result>
		</step>
	</questDesc>
	
	<!-- Квест на первую вражескую базу -->
	<questDesc id="firstEnemyBaseQuest" name="{1st.enemy.quest.title}" description="{1st.enemy.quest.description}">
		<step>
			<stepTargets>
				<stepTarget>
					<!-- Если на стартовой базе игрока уже есть хоть один боевой юнит, напасть на базу игрока -->
					<condition>
						<if>
							<trigger>unitsCount</trigger>
							<value>4C3AC134-B7EF-4360-9915-39A6FB231071</value>
							<min type="int">1</min>
						</if>
					</condition>
					<result>
						<!-- Атака базы поддерживает следующие параметры:
							target={строковое значение} - идентификатор атакуемой базы
							departure={строковое значение} - база отправления экспедиции
							В качестве дочерних элементов выступает набор атакующих юнитов -->
						<attackBase target="4C3AC134-B7EF-4360-9915-39A6FB231071" departure="357D63E3-9BDB-4699-905B-5D6DD16D8048">
							<!-- Атакующий юнит поддерживает следующие параметры:
								id={строковое значение} - идентификатор атакующего юнита -->
							<attacker id="0796C85D-0BDF-4C46-8851-DF7E5DB92A8B"/>
						</attackBase>
					</result>
				</stepTarget>
				<stepTarget>
					<!-- Если на стартовой базе игрока пока нет ни одного боевого юнита, показать базу противника -->
					<condition>
						<not>
							<if>
								<trigger>unitsCount</trigger>
								<value>4C3AC134-B7EF-4360-9915-39A6FB231071</value>
							</if>
						</not>
					</condition>
					<result>
						<!-- Команда найти базу поддерживает следующие параметры:
							id={строковое значение} - уникальный идентификатор найденной базы -->
						<findBase id="357D63E3-9BDB-4699-905B-5D6DD16D8048"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
		<step>
			<stepTargets>
				<!-- Юзер победил, квест завершается без награды, возвращаемся в вызывающий стартовый квест -->
				<stepTarget>
					<condition>
						<if>
							<trigger>ismailTaken</trigger>
						</if>
					</condition>
				</stepTarget>
				<!-- Юзер проиграл, игра завершена -->
				<stepTarget>
					<condition>
						<not>
							<if>
								<trigger>basesCount</trigger>
							</if>
						</not>
					</condition>
					<result>
						<gameOver/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
	</questDesc>
	
	<!-- Обучающий квест -->
	<questDesc id="tutorialQuest" name="{tutorial.quest.title}" description="{tutorial.quest.description}">
		<step>
			<result>
				<!-- Сообщение пользователю, поддерживает следующие параметры:
					text={строковое значение} - текст сообщения
					buttons={список строковых значений, разделенных запятыми} - список отображаемых кнопок из набора ["yes","no","ok","cancel"].
					В качестве дочерних элементов может иметь обработчики нажатия кнопок, содержащие соответствующий result. -->
				<uiMessage text="{tutorial.quest.intro}" buttons="ok"/>
			</result>
		</step>
		<step>
			<result>
				<uiMessage text="{tutorial.create.base}" buttons="ok"/>
			</result>
			<stepTargets>
				<!-- Дождаться, когда юзер создаст первую базу -->
				<stepTarget>
					<condition>
						<if>
							<trigger>basesCount</trigger>
							<min type="int">1</min>
						</if>
					</condition>
					<result>
						<uiMessage text="{tutorial.base.created}" buttons="ok"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
		<step>
			<result>
				<uiMessage text="{tutorial.hire.employee}" buttons="ok"/>
			</result>
			<stepTargets>
				<!-- Дождаться, когда юзер наймет работников -->
				<stepTarget>
					<condition>
						<if>
							<trigger>employeesCount</trigger>
							<value>laborer</value>
							<min type="int">3</min>
						</if>
					</condition>
					<result>
						<uiMessage text="{tutorial.employee.hired}" buttons="ok"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
		<step>
			<!-- Через пять секунд выдать юзеру артефакт - палку -->
			<result>
				<timeout delay="5s">
					<result>
						<resource id="cudgel" count="1"/>
					</result>
				</timeout>
			</result>
			<stepTargets>
				<stepTarget>
					<!-- На случай, если рабочие найдут раньше, реагировать также на другие базовые артефакты -->
					<condition>
						<or>
							<if>
								<trigger>foundCudgel</trigger>
							</if>
							<if>
								<trigger>foundNail</trigger>
							</if>
							<if>
								<trigger>foundCardboard</trigger>
							</if>
							<if>
								<trigger>foundRope</trigger>
							</if>
						</or>
					</condition>
					<result>
						<!-- При появлении любого из выше перечисленных артефактов, сообщить юзеру о нахождении артефакта -->
						<uiMessage text="{tutorial.artifact.found}" buttons="ok"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
		<step>
			<result>
				<uiMessage text="{tutorial.build.lab}" buttons="ok"/>
			</result>
			<stepTargets>
				<!-- Дождаться, когда юзер построит лабораторию -->
				<stepTarget>
					<condition>
						<if>
							<trigger>modulesCount</trigger>
							<value>lab</value>
						</if>
					</condition>
					<result>
						<uiMessage text="{tutorial.hire.scietists}" buttons="ok"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
		<step>
			<!-- Ждем, пока юзер наймет ученых -->
			<stepTargets>
				<stepTarget>
					<condition>
						<if>
							<trigger>employeesCount</trigger>
							<value>scientist</value>
							<min type="int">2</min>
						</if>
					</condition>
					<result>
						<uiMessage text="{tutorial.begin.research}" buttons="ok"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
		<step>
			<!-- Ждем завершения какого-либо исследования -->
			<stepTargets>
				<stepTarget>
					<condition>
						<or>
							<if>
								<trigger>cudgelResearchComplete</trigger>
							</if>
							<if>
								<trigger>nailResearchComplete</trigger>
							</if>
							<if>
								<trigger>cardboardResearchComplete</trigger>
							</if>
							<if>
								<trigger>ropeResearchComplete</trigger>
							</if>
						</or>
					</condition>
					<result>
						<uiMessage text="{tutorial.research.complete}" buttons="ok"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
		<step>
			<!-- Ждем завершения какого-либо исследования, необходимого для начала производства -->
			<stepTargets>
				<stepTarget>
					<condition>
						<or>
							<if>
								<trigger>maceResearchComplete</trigger>
							</if>
							<if>
								<trigger>cardboardResearchComplete</trigger>
							</if>
							<if>
								<trigger>bowResearchComplete</trigger>
							</if>
						</or>
					</condition>
					<result>
						<!-- При появлении любой из выше перечисленных технологий, сообщить юзеру о возможности производства -->
						<uiMessage text="{tutorial.can.product}" buttons="ok"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
		<step>
			<stepTargets>
				<!-- Дождаться, когда юзер построит мастерскую -->
				<stepTarget>
					<condition>
						<if>
							<trigger>modulesCount</trigger>
							<value>workshop</value>
						</if>
					</condition>
					<result>
						<!-- Предложить юзеру нанять инженеров -->
						<uiMessage text="{tutorial.hire.engineers}" buttons="ok"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
		<step>
			<!-- Ждем, пока юзер наймет инженера -->
			<stepTargets>
				<stepTarget>
					<condition>
						<if>
							<trigger>employeesCount</trigger>
							<value>engineer</value>
						</if>
					</condition>
					<result>
						<uiMessage text="{tutorial.begin.production}" buttons="ok"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
		<step>
			<!-- Ждем завершения какого-либо производства -->
			<stepTargets>
				<stepTarget>
					<condition>
						<or>
							<if>
								<trigger>resourcesCount</trigger>
								<value>mace</value>
							</if>
							<if>
								<trigger>resourcesCount</trigger>
								<value>cardboardArmor</value>
							</if>
							<if>
								<trigger>resourcesCount</trigger>
								<value>bow</value>
							</if>
						</or>
					</condition>
					<result>
						<uiMessage text="{tutorial.production.complete}" buttons="ok"/>
					</result>
				</stepTarget>
			</stepTargets>
		</step>
	</questDesc>
</questsDict>