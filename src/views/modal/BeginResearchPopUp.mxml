<?xml version="1.0" encoding="utf-8"?>

<!-- Интерфейс запуска исследования -->

<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   xmlns:ui="views.ui.*"
                           xmlns:dropDownList="com.flextras.mobile.dropDownList.*"
                           xmlns:mx="library://ns.adobe.com/flex/mx"
                           creationComplete="{updateResearchInfo();}"
                           filters="{proto.popUpShadow}">
	
	<s:BorderContainer>
		<s:layout>
			<s:VerticalLayout gap="10" paddingBottom="1" paddingLeft="1" paddingRight="1"
							  paddingTop="1"/>
		</s:layout>
		
		<s:BorderContainer width="100%" minHeight="0" backgroundColor="gray" borderVisible="false">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingLeft="5"
								  paddingRight="5" paddingTop="5"/>
			</s:layout>
			
			<s:Label color="white" text="@Resource(key='research.begin.popup.title', bundle='common')"/>
		</s:BorderContainer>
        
        <s:VGroup width="100%" gap="10" horizontalAlign="center" paddingBottom="5" paddingLeft="5"
                  paddingRight="5" paddingTop="5">
            
            <s:VGroup width="100%" gap="3" horizontalAlign="center">
                <s:Label text="@Resource(key='research.begin.popup.research', bundle='common')"/>
                
                <dropDownList:DropDownList id="researchSelector" width="100%" dataProvider="{investigationsList}"
                                           change="{scientistsCtr.value = 0; scientistsLeave = freeScientists;}">
                    <dropDownList:itemRenderer>
                        <fx:Component>
                            <s:LabelItemRenderer>
                                <fx:Script>
                                    <![CDATA[
                                        override public function set data(value:Object):void
                                        {
                                            super.data = value;
                                            setStyle("color", data && data.available ? 0x000000 : 0xacacac);
                                        }
                                    ]]>
                                </fx:Script>
                            </s:LabelItemRenderer>
                        </fx:Component>
                    </dropDownList:itemRenderer>
                </dropDownList:DropDownList>
            </s:VGroup>
            
            <s:BorderContainer cornerRadius="4">
                <s:layout>
                    <s:VerticalLayout paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
                </s:layout>
                
                <s:TextArea id="requirementsTextArea" width="250" fontSize="14" editable="false" selectable="false" borderVisible="false"
                            verticalScrollPolicy="off" horizontalScrollPolicy="off" minHeight="20"/>
            </s:BorderContainer>
            
            <s:VGroup gap="3" horizontalAlign="center" paddingTop="10" paddingBottom="5">
                
                <s:Label text="{resourceManager.getString('common', 'research.begin.popup.scientists.free', [ scientistsLeave ])}" fontWeight="bold"/>
                
                <s:HGroup verticalAlign="middle" enabled="{researchSelector.selectedItem &amp;&amp; researchSelector.selectedItem.available}">
                    
                    <s:Label text="@Resource(key='research.begin.popup.scientists.count', bundle='common')"/>
                    
                    <ui:NumericStepper id="scientistsCtr" min="0" max="{freeScientists}"
                                       change="{scientistsLeave = freeScientists - scientistsCtr.value;}"/>
                </s:HGroup>
            </s:VGroup>
            
            <s:HGroup width="100%">
                <s:Button width="50%" label="@Resource(key='research.begin.popup.explore', bundle='common')"
                          click="{close(false, Const.OK);}"
                          enabled="{researchSelector.selectedItem &amp;&amp; researchSelector.selectedItem.available &amp;&amp; scientistsCtr.value > 0}"/>
                
                <s:Button width="50%" label="@Resource(key='alert.cancel', bundle='common')"
                          click="{close(false, Const.CANCEL);}"/>
            </s:HGroup>
        </s:VGroup>
	</s:BorderContainer>
	
	<fx:Declarations>
	</fx:Declarations>
    
    <fx:Metadata>
        [ResourceBundle("common")]
    </fx:Metadata>
	
	<fx:Script>
		<![CDATA[
            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;
            
            import spark.components.supportClasses.StyleableTextField;
            
            import dictionary.Const;
            
            //--------------------------------------------------------------------------
            // 
            //--------------------------------------------------------------------------
            
            private var _investigationsList:ArrayCollection;
            private var _freeScientists:int;
            
            [Bindable]
            private var scientistsLeave:int;
            
            //--------------------------------------------------------------------------
            // 
            //--------------------------------------------------------------------------
            
            [Bindable (event="investigationsListChanged")]
            public function get investigationsList():ArrayCollection
            {
                return _investigationsList;
            }
            
            public function set investigationsList(value:ArrayCollection):void
            {
                if (value == _investigationsList)
                    return;
                
                _investigationsList = value;
                dispatchEvent(new Event("investigationsListChanged"));
                
                if (initialized)
                {
                    researchSelector.selectedIndex = -1;
                    
                    requirementsTextArea.text = "";
                    requirementsTextArea.height = requirementsTextArea.minHeight;
                    
                    updateResearchInfo();
                }
            }
            
            [Bindable (event="freeScientistsChanged")]
            public function get freeScientists():int
            {
                return _freeScientists;
            }
            
            public function set freeScientists(value:int):void
            {
                if (value == _freeScientists)
                    return;
                
                _freeScientists = value;
                dispatchEvent(new Event("freeScientistsChanged"));
                
                scientistsLeave = _freeScientists;
                
                if (initialized)
                    scientistsCtr.value = 0;
            }
            
            //--------------------------------------------------------------------------
            // 
            //--------------------------------------------------------------------------
            
            private function updateResearchInfo():void
            {
                var data:Object = researchSelector.selectedItem;
                if (!data && investigationsList.length > 0)
                {
                    researchSelector.selectedIndex = 0;
                    data = researchSelector.selectedItem;
                }
                
                if (data)
                {
                    var textDisplay:StyleableTextField = StyleableTextField(requirementsTextArea.textDisplay);
                    textDisplay.htmlText = data.available ? data.requirements : '<font color="#c70000">' + data.requirements + '</font>';
                    
                    var numLines:int = textDisplay.numLines;
                    var h:Number = requirementsTextArea.getStyle("paddingTop") + requirementsTextArea.getStyle("paddingBottom");
                    for (var i:int = 0; i < numLines; i++)
                        h += textDisplay.getLineMetrics(i).height;
                    requirementsTextArea.height = h;
                }
                else
                {
                    requirementsTextArea.text = "";
                    requirementsTextArea.height = requirementsTextArea.minHeight;
                }
            }
            
        ]]>
	</fx:Script>
</s:SkinnablePopUpContainer>
