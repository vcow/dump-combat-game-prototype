<?xml version="1.0" encoding="utf-8"?>

<!-- UI базы -->

<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:modal="views.modal.*"
        creationComplete="{updateCanRemove();}">
	<s:layout>
		<s:VerticalLayout gap="2" paddingLeft="5" paddingRight="5"/>
	</s:layout>
    
    <s:titleContent>
        <s:Button width="100%" label="{baseName}" enabled="{Boolean(baseName)}"
                  styleName="baseNameButtonStyle" click="renameBase_clickHandler(event)"/>
    </s:titleContent>
	
	<s:navigationContent>
		<s:Button label="&lt;" click="{navigator.popView();}"/>
	</s:navigationContent>
    
    <s:VGroup width="100%" height="100%" paddingLeft="5" paddingTop="10" paddingRight="5" paddingBottom="5">
        
        <s:BorderContainer backgroundColor="#f0f0f0" borderVisible="false" width="100%" minHeight="0">
            <s:layout>
                <s:HorizontalLayout paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2" horizontalAlign="right" gap="2"/>
            </s:layout>
            
            <s:Button label="+" click="buildNewModule_clickHandler(event)" minWidth="42"
                      enabled="{!modulesList || modulesList.length &lt; modulesLimit}"/>
            
            <s:Button label="-" click="removeModule_clickHandler(event)" minWidth="42"
                      enabled="{canRemoveModule}"/>
        </s:BorderContainer>
        
        <s:List id="modulesListView" verticalScrollPolicy="on" horizontalScrollPolicy="off"
                width="100%" height="100%" change="modulesListView_changeHandler(event)"
                dataProvider="{modulesList}" allowMultipleSelection="true">
            <s:itemRenderer>
                <fx:Component>
                    <s:LabelItemRenderer>
                        <fx:Script>
                            <![CDATA[
                                override public function set data(value:Object):void
                                {
                                    super.data = value;
                                    if (data)
                                    {
                                        if (data.under_construct)
                                        {
                                            setStyle("alternatingItemColors", 0xa3d39c);
                                            setStyle("color", 0x005e20);
                                            label = resourceManager.getString("common", "base.under.construct", [ data.label ]);
                                        }
                                        else
                                        {
                                            setStyle("alternatingItemColors", data.inactive ? 0xf69679 : 0xffffff);
                                        }
                                    }
                                }
                            ]]>
                        </fx:Script>
                    </s:LabelItemRenderer>
                </fx:Component>
            </s:itemRenderer>
        </s:List>
    </s:VGroup>
    
    <s:Group width="100%">
        <s:Line left="0" right="0">
            <s:stroke>
                <s:SolidColorStroke color="#404040"/>
            </s:stroke>
        </s:Line>
    </s:Group>
    
    <s:HGroup width="100%" horizontalAlign="center" gap="1" paddingTop="5" paddingBottom="10">
        <s:Button maxWidth="250" label="@Resource(key='base.personnel', bundle='common')" width="50%"/>
        <s:Button maxWidth="250" label="@Resource(key='base.garrison', bundle='common')" width="50%"/>
    </s:HGroup>
    
	<fx:Declarations>
		<modal:RenameBasePopUp id="renameBasePopUp" close="renamePopUp_closeHandler(event)"/>
        <modal:BuildModulePopUp id="buildModulePopUp" close="buildModulePopUp_closeHandler(event)"/>
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="rename", type="events.BaseEvent")]
        [Event(name="createModule", type="events.BaseEvent")]
		
		[ResourceBundle("common")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
            import mx.collections.ArrayCollection;
            import mx.core.FlexGlobals;
            import mx.managers.PopUpManager;
            import mx.utils.StringUtil;
            
            import spark.events.IndexChangeEvent;
            import spark.events.PopUpEvent;
            
            import dictionary.Const;
            
            import events.BaseEvent;
            
            import facade.ProtoFacade;
            
            import mediator.BaseMediator;
            
            import views.modal.AlertPopUp;
            
            import vo.ModuleDescVO;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
			public var buildNewBaseAvailable:Boolean = false;
			
			protected var _baseMediator:BaseMediator;
			
            private var _baseId:String;
            
            private var _canRemoveModule:Boolean;
            private var _numStores:int;
            
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
            [Bindable]
            public var baseName:String;
            
            [Bindable]
            public var modulesList:ArrayCollection;
            
            [Bindable]
            public var modulesLimit:int;
            
            [Bindable (event="canRemoveModuleChanged")]
            private function get canRemoveModule():Boolean
            {
                return _canRemoveModule;
            }
            
            //--------------------------------------------------------------------------
            // 
            //--------------------------------------------------------------------------
            
            /**
             * Флаг, указывающий на то, что в этой базе остался последний складской модуль
             * (служит для предотвращения удаления последнего складского модуля)
             */
            public function set numStores(value:int):void
            {
                if (value == _numStores)
                    return;
                
                _numStores = value;
                
                if (initialized)
                    updateCanRemove();
            }
            
            /**
             * Идентификатор базы
             */
            public function get baseId():String
            {
                return _baseId;
            }
            
            protected function renamePopUp_closeHandler(event:PopUpEvent):void
            {
                if (event.data == Const.OK)
                    dispatchEvent(new BaseEvent(BaseEvent.RENAME, renameBasePopUp.baseId,
                        StringUtil.trim(renameBasePopUp.baseNameInput.text)));
            }
            
            protected function buildModulePopUp_closeHandler(event:PopUpEvent):void
            {
                if (event.data == Const.OK)
                    dispatchEvent(new BaseEvent(BaseEvent.CREATE_MODULE, _baseMediator.baseId, buildModulePopUp.moduleTypeSelector.selectedItem.id));
            }
            
            protected function buildNewModule_clickHandler(event:MouseEvent):void
            {
                buildModulePopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                PopUpManager.centerPopUp(buildModulePopUp);
            }
            
            protected function removeModule_clickHandler(event:MouseEvent):void
            {
                var alertPopUp:AlertPopUp = new AlertPopUp();
                alertPopUp.text = resourceManager.getString("common", "alert.remove.module.warning");
                alertPopUp.buttonFlags = Const.YES | Const.NO;
                
                alertPopUp.addEventListener(PopUpEvent.CLOSE, function(event:PopUpEvent):void {
                    if (event.data == Const.YES)
                    {
                        for each (var data:Object in modulesListView.selectedItems)
                            dispatchEvent(new BaseEvent(BaseEvent.REMOVE_MODULE, _baseMediator.baseId, data.index));
                    }
                });
                
                alertPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                PopUpManager.centerPopUp(alertPopUp);
            }
            
            protected function renameBase_clickHandler(event:MouseEvent):void
            {
                renameBasePopUp.baseName = _baseMediator.baseName;
                renameBasePopUp.baseId = _baseMediator.baseId;
                renameBasePopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                PopUpManager.centerPopUp(renameBasePopUp);
            }
            
            protected function modulesListView_changeHandler(event:IndexChangeEvent):void
            {
                updateCanRemove();
            }
            
            private function updateCanRemove():void
            {
                var storesLeft:int = _numStores;
                
                for each (var data:Object in modulesListView.selectedItems)
                {
                    if (data.id == ModuleDescVO.STORE)
                        storesLeft--;
                }
                
                var canRemove:Boolean = modulesListView.selectedIndex >= 0 && storesLeft >= 1;
                
                if (canRemove == _canRemoveModule)
                    return;
                
                _canRemoveModule = canRemove;
                dispatchEvent(new Event("canRemoveModuleChanged"));
            }
            
            //----------------------------------
            //  View
            //----------------------------------
			
            override public function set data(value:Object):void
            {
                super.data = value;
                
                _baseId = String(data);
                
                _baseMediator = BaseMediator(ProtoFacade.getInstance().retrieveMediator(BaseMediator.NAME));
                _baseMediator.setViewComponent(this);
            }
            
        ]]>
	</fx:Script>
</s:View>
