<?xml version="1.0" encoding="utf-8"?>

<!-- UI создания новых баз и доступа к уже существующим -->

<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:modal="views.modal.*"
		title="@Resource(key='bases.title', bundle='common')"
		creationComplete="creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<s:navigationContent>
		<s:Button label="&lt;" click="{navigator.popView();}"/>
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button label="+" click="buildNewBase_clickHandler(event)"/>
	</s:actionContent>
    
    <s:HGroup styleName="tabBarStyle" width="100%" gap="-1" height="30">
        <s:RadioButton label="@Resource(key='bases.type.my', bundle='common')" width="100%" height="100%" groupName="typeRadioGroup" selected="true" value="my"/>
        <s:RadioButton label="@Resource(key='bases.type.enemy', bundle='common')" width="100%" height="100%" groupName="typeRadioGroup" value="enemy"/>
        <s:RadioButton label="@Resource(key='bases.type.ruin', bundle='common')" width="100%" height="100%" groupName="typeRadioGroup" value="ruin"/>
    </s:HGroup>
	
	<s:List id="basesListView" verticalScrollPolicy="on" horizontalScrollPolicy="off"
			width="100%" height="100%" change="basesListView_changeHandler(event)"
			dataProvider="{basesList}"/>
	
	<fx:Declarations>
        <s:RadioButtonGroup id="typeRadioGroup" change="typeRadioGroup_changeHandler(event)"/>
        
		<modal:CreateBasePopUp id="createBasePopUp" close="createBasePopUp_closeHandler(event)"/>
		<modal:RenameBasePopUp id="renameBasePopUp" close="renamePopUp_closeHandler(event)"/>
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="createBase", type="events.BasesListEvent")]
		[Event(name="rename", type="events.BaseEvent")]
		
		[ResourceBundle("common")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
            import mx.collections.ArrayCollection;
            import mx.core.FlexGlobals;
            import mx.events.FlexEvent;
            import mx.managers.PopUpManager;
            import mx.utils.StringUtil;
            
            import spark.events.IndexChangeEvent;
            import spark.events.PopUpEvent;
            
            import dictionary.Const;
            
            import events.BaseEvent;
            import events.BasesListEvent;
            
            import facade.ProtoFacade;
            
            import mediator.BasesListMediator;
            
            import views.modal.AlertPopUp;
            import views.modal.CreateBasePopUp;
            import views.modal.RenameBasePopUp;
            import views.ui.BaseView;
            
            import vo.BaseVO;
            import vo.RuinVO;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
			[Bindable]
			public var basesList:ArrayCollection = new ArrayCollection();
			
			public var buildNewBaseAvailable:Boolean = false;
			
			protected var _basesListMediator:BasesListMediator;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
			/**
			 * Открыть интерфейс для переименования базы
			 * @param baseVO база, которую следует переименовать
			 */
			public function renameBase(baseVO:BaseVO):void
			{
				if (baseVO)
				{
					renameBasePopUp.baseName = baseVO.baseName;
					renameBasePopUp.baseId = baseVO.baseId;
					renameBasePopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
					PopUpManager.centerPopUp(renameBasePopUp);
				}
			}
            
            public function updateList():void
            {
                _basesListMediator.updateList(typeRadioGroup.selectedValue.toString());
            }
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_basesListMediator = BasesListMediator(ProtoFacade.getInstance().retrieveMediator(BasesListMediator.NAME));
				_basesListMediator.setViewComponent(this);
			}
			
			protected function basesListView_changeHandler(event:IndexChangeEvent):void
			{
                switch (typeRadioGroup.selectedValue)
                {
                    case "my":
                        navigator.pushView(BaseView, basesListView.selectedItem.id);
                        break;
                    case "enemy":
                        break;
                    case "ruin":
                        break;
                }
			}
			
			protected function buildNewBase_clickHandler(event:MouseEvent):void
			{
				if (buildNewBaseAvailable)
				{
                    createBasePopUp.currentState = _basesListMediator.isFirstBase ? "woPrice" : "normal";
					createBasePopUp.ruinsList = _basesListMediator.ruinsDataProvider;
					createBasePopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
					PopUpManager.centerPopUp(createBasePopUp);
				}
				else
				{
                    var alertPopUp:AlertPopUp = new AlertPopUp();
					alertPopUp.text = resourceManager.getString("common", "alert.noruins");
					alertPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
					PopUpManager.centerPopUp(alertPopUp);
				}
			}
			
			private function createBasePopUp_closeHandler(event:PopUpEvent):void
			{
				if (event.data == Const.OK)
				{
					var ruinVO:RuinVO = createBasePopUp.ruinsSelector.selectedItem as RuinVO;
					if (ruinVO)
					{
						// Создать базу на основе выбранных руин
						dispatchEvent(new BasesListEvent(BasesListEvent.CREATE_BASE, ruinVO));
					}
				}
			}
			
			protected function renamePopUp_closeHandler(event:PopUpEvent):void
			{
				if (event.data == Const.OK)
					dispatchEvent(new BaseEvent(BaseEvent.RENAME, renameBasePopUp.baseId,
                        StringUtil.trim(renameBasePopUp.baseNameInput.text)));
			}
            
            protected function typeRadioGroup_changeHandler(event:Event):void
            {
                updateList();
            }
			
		]]>
	</fx:Script>
</s:View>
