<?xml version="1.0" encoding="utf-8"?>

<!-- UI исследований -->

<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:modal="views.modal.*"
		title="@Resource(key='research.title', bundle='common')"
        creationComplete="creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<s:navigationContent>
		<s:Button label="&lt;" click="{navigator.popView();}"/>
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button label="+" click="beginResearch_clickHandler(event)"/>
	</s:actionContent>
	
	<s:VGroup styleName="tabBarStyle" width="100%" gap="-1">
		<s:HGroup width="100%" gap="-1" height="30">
			<s:RadioButton label="@Resource(key='research.cat.all', bundle='common')" width="100%" height="100%" groupName="categoryRadioGroup" selected="true" value="0"/>
		</s:HGroup>
		<s:HGroup width="100%" gap="-1" height="30">
			<s:RadioButton label="@Resource(key='research.cat.completed', bundle='common')" width="100%" height="100%" groupName="categoryRadioGroup" value="1"/>
			<s:RadioButton label="@Resource(key='research.cat.unfinished', bundle='common')" width="100%" height="100%" groupName="categoryRadioGroup" value="2"/>
		</s:HGroup>
	</s:VGroup>
	
	<s:List id="researchView" verticalScrollPolicy="on" horizontalScrollPolicy="off"
			width="100%" height="100%" change="researchView_changeHandler(event)"
            dataProvider="{_researchList}"/>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="categoryRadioGroup" change="categoryRadioGroup_changeHandler(event)"/>
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("common")]
        
        [Event(name="beginResearch", type="events.ResearchEvent")]
        [Event(name="changeResearchScientistsCount", type="events.ResearchEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
            import mx.collections.ArrayCollection;
            import mx.core.FlexGlobals;
            import mx.events.FlexEvent;
            import mx.managers.PopUpManager;
            
            import spark.events.IndexChangeEvent;
            import spark.events.PopUpEvent;
            
            import dictionary.Const;
            
            import events.ResearchEvent;
            
            import facade.ProtoFacade;
            
            import helpers.InvestigationsHelper;
            import helpers.ModulesHelper;
            
            import mediator.InvestigationsMediator;
            
            import views.modal.AlertPopUp;
            import views.modal.BeginResearchPopUp;
            
            import vo.ModuleDescVO;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
            private var _investigationsMediator:InvestigationsMediator;
            
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
			[Bindable]
			private var _researchList:ArrayCollection;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
            
            protected function creationCompleteHandler(event:FlexEvent):void
            {
                _investigationsMediator = InvestigationsMediator(ProtoFacade.getInstance().retrieveMediator(InvestigationsMediator.NAME));
                _investigationsMediator.setViewComponent(this);
            }
			
			protected function categoryRadioGroup_changeHandler(event:Event):void
			{
			}
			
            protected function beginResearch_clickHandler(event:MouseEvent):void
            {
                var availableResearch:ArrayCollection = _investigationsMediator.getAvailableResearch();
                if (!availableResearch || availableResearch.length <= 0)
                {
                    var alertPopUp:AlertPopUp = new AlertPopUp();
                    alertPopUp.text = resourceManager.getString("common", "alert.noresearch");
                    alertPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                    PopUpManager.centerPopUp(alertPopUp);
                    return;
                }
                
                var freeLabSpace:int = (new ModulesHelper()).getSpace(ModuleDescVO.LAB);
                if (freeLabSpace <= 0)
                {
                    alertPopUp = new AlertPopUp();
                    alertPopUp.text = resourceManager.getString("common", "alert.nolab");
                    alertPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                    PopUpManager.centerPopUp(alertPopUp);
                    return;
                }
                
                var freeScientists:int = (new InvestigationsHelper()).getFreeScientists().length;
                if (freeScientists <= 0)
                {
                    alertPopUp = new AlertPopUp();
                    alertPopUp.text = resourceManager.getString("common", "alert.noscientists");
                    alertPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                    PopUpManager.centerPopUp(alertPopUp);
                    return;
                }
                
                var beginResearchPopUp:BeginResearchPopUp = new BeginResearchPopUp();
                beginResearchPopUp.addEventListener(PopUpEvent.CLOSE, beginResearchPopUp_closeHandler);
                
                beginResearchPopUp.investigationsList = availableResearch;
                beginResearchPopUp.freeScientists = Math.min(freeScientists, freeLabSpace);
                
                beginResearchPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                PopUpManager.centerPopUp(beginResearchPopUp);
            }
            
            protected function researchView_changeHandler(event:IndexChangeEvent):void
            {
            }
            
            protected function beginResearchPopUp_closeHandler(event:PopUpEvent):void
            {
                var beginResearchPopUp:BeginResearchPopUp = BeginResearchPopUp(event.target);
                beginResearchPopUp.removeEventListener(PopUpEvent.CLOSE, beginResearchPopUp_closeHandler);
                
                if (event.data == Const.OK && beginResearchPopUp.researchSelector.selectedItem)
                {
                    dispatchEvent(new ResearchEvent(ResearchEvent.BEGIN_RESEARCH,
                        beginResearchPopUp.researchSelector.selectedItem.id, beginResearchPopUp.scientistsCtr.value));
                }
            }
            
        ]]>
	</fx:Script>
</s:View>
