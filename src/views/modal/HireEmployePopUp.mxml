<?xml version="1.0" encoding="utf-8"?>

<!-- Интерфейс найма нового сотрудника -->

<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   xmlns:ui="views.ui.*"
                           xmlns:dropDownList="com.flextras.mobile.dropDownList.*"
                           creationComplete="creationCompleteHandler(event)" xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<s:BorderContainer>
		<s:layout>
			<s:VerticalLayout gap="10" paddingBottom="1" paddingLeft="1" paddingRight="1"
							  paddingTop="1"/>
		</s:layout>
		
		<s:BorderContainer width="100%" minHeight="0" backgroundColor="gray" borderVisible="false">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingLeft="5"
								  paddingRight="5" paddingTop="5"/>
			</s:layout>
			
			<s:Label color="white" text="@Resource(key='hire.popup.title', bundle='common')"/>
		</s:BorderContainer>
        
        <s:VGroup width="100%" gap="10" horizontalAlign="center" paddingBottom="5" paddingLeft="5"
                  paddingRight="5" paddingTop="5">
            
            <s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle">
                <s:Button label="&lt;" click="scrollBack_clickHandler(event)"/>
                
                <s:BorderContainer width="100" height="100">
                    <mx:UIComponent id="iconView"/>
                </s:BorderContainer>
                
                <s:Button label=">" click="scrollFront_clickHandler(event)"/>
            </s:HGroup>
            
            <s:TextInput id="employeeNameInput" text="{employeeName}" width="250" maxChars="25" focusAlpha="0"
                         change="{hireEnabled = StringUtil.trim(employeeNameInput.text).length > 0;}"
                         restrict="@Resource(key='restrict.name', bundle='common')"/>
            
            <s:VGroup width="100%" gap="3" horizontalAlign="center">
                <s:Label text="@Resource(key='hire.popup.prof', bundle='common')"/>
                
                <dropDownList:DropDownList id="profSelector" width="100%" dataProvider="{professionsList}"
                                           labelField="professionName" change="{updatePrice();}"/>
            </s:VGroup>
            
            <s:VGroup gap="3" horizontalAlign="center">
                <s:Label text="@Resource(key='hire.popup.price', bundle='common')"/>
                
                <ui:PriceView width="100%" price="{price}"/>
            </s:VGroup>
            
            <s:HGroup width="100%">
                <s:Button width="50%" label="@Resource(key='hire.popup.hire', bundle='common')"
                          click="ok_clickHandler(event)" enabled="{hireEnabled}"/>
                
                <s:Button width="50%" label="@Resource(key='new.base.popup.cancel', bundle='common')"
                          click="{close(false, Const.CANCEL);}"/>
            </s:HGroup>
        </s:VGroup>
        
		<ui:SimpleResourcesView/>
	</s:BorderContainer>
	
	<fx:Declarations>
	</fx:Declarations>
    
    <fx:Metadata>
        [ResourceBundle("common")]
    </fx:Metadata>
	
	<fx:Script>
		<![CDATA[
            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;
            import mx.utils.StringUtil;
            
            import dictionary.Const;
            
            import managers.ImagesManager;
            import managers.PersonTemplatesManager;
            
            import vo.PriceVO;
            import vo.ProfessionDescVO;
            
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
            
            // TODO: сделать поддержку списка кандидатов
			
            private var _defaultProfession:int;
            private var _professionsList:ArrayCollection;
            
            private var _personsData:Array = PersonTemplatesManager.getInstance().getPersonsList();
            private var _personId:int = -1;
            
            private var _gender:String = "m";
            private var _icon:String;
            
            [Bindable]
            private var hireEnabled:Boolean;
            
            [Bindable]
            public var employeeName:String;
            
            [Bindable (event="professionsListChanged")]
            public function get professionsList():ArrayCollection
            {
                return _professionsList;
            }
            
            public function set professionsList(value:ArrayCollection):void
            {
                if (value == _professionsList)
                    return;
                
                _professionsList = value;
                dispatchEvent(new Event("professionsListChanged"));
                
                if (initialized)
                    setDefaultProfession();
            }
            
            //--------------------------------------------------------------------------
            // 
            //--------------------------------------------------------------------------
            
			[Bindable]
			private var price:PriceVO;
            
            [Bindable]
            private var currentProfIndex:int;
            
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
            public function set defaultProfession(value:uint):void
            {
                if (value == _defaultProfession)
                    return;
                
                _defaultProfession = value;
                
                if (initialized)
                    setDefaultProfession();
            }
            
            private function setDefaultProfession():void
            {
                var index:int = -1;
                if (professionsList)
                {
                    for (var i:int = 0; i < professionsList.length; i++)
                    {
                        var prof:ProfessionDescVO = ProfessionDescVO(professionsList[i]);
                        if (prof.professionId == _defaultProfession)
                        {
                            index = i;
                            break;
                        }
                    }
                }
                profSelector.selectedIndex = index;
                
                updatePrice();
            }
            
            private function updatePrice():void
            {
                if (profSelector.selectedItem)
                    price = ProfessionDescVO(profSelector.selectedItem).professionHiringCost;
            }
            
            private function set icon(value:String):void
            {
                if (value == _icon)
                    return;
                
                _icon = value;
                
                ImagesManager.getInstance().paint(_icon, iconView.graphics);
            }
            
            private function selectPerson(data:Object):void
            {
                employeeNameInput.text = data.name;
                _gender = data.gender;
                icon = data.avatar;
            }
            
            protected function creationCompleteHandler(event:FlexEvent):void
            {
                setDefaultProfession();
                
                if (_personsData.length > 0)
                    selectPerson(_personsData[++_personId]);
            }
            
            protected function scrollBack_clickHandler(event:MouseEvent):void
            {
                if (_personId < 0)
                    return;
                
                _personId--;
                if (_personId < 0)
                    _personId = _personsData.length - 1;
                
                selectPerson(_personsData[_personId]);
            }
            
            protected function scrollFront_clickHandler(event:MouseEvent):void
            {
                if (_personId < 0)
                    return;
                
                _personId++;
                if (_personId >= _personsData.length)
                    _personId = 0;
                
                selectPerson(_personsData[_personId]);
            }
            
            protected function ok_clickHandler(event:MouseEvent):void
            {
                PersonTemplatesManager.getInstance().select(employeeNameInput.text, _icon);
                close(false, Const.OK);
            }
            
        ]]>
	</fx:Script>
</s:SkinnablePopUpContainer>
