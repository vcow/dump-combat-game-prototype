<?xml version="1.0" encoding="utf-8"?>

<!-- UI вербовки новых персонажей и доступ к уже завербованным -->

<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:modal="views.modal.*"
		title="@Resource(key='personnel.title', bundle='common')"
        creationComplete="creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<s:navigationContent>
		<s:Button label="&lt;" click="{navigator.popView();}"/>
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button label="+" click="hireEmploye_clickHandler(event)"/>
	</s:actionContent>
	
	<s:List id="employeCategoriesView" verticalScrollPolicy="on" horizontalScrollPolicy="off"
			width="100%" height="100%" change="employeCategoriesView_changeHandler(event)"
            dataProvider="{professionsList}" labelField="professionCategory"/>
	
	<fx:Declarations>
        <modal:HireEmployePopUp id="hireEmployePopUp" close="hireEmployePopUp_closeHandler(event)"/>
        <modal:PlaceEmployeePopUp id="placeEmployeePopUp" close="placeEmployeePopUp_closeHandler(event)"/>
        <modal:AlertPopUp id="alertPopUp"/>
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("common")]
        [Event(name="createPerson", type="events.EmployeeListEvent")]
        [Event(name="placeEmployee", type="events.EmployeeListEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
            import mx.collections.ArrayCollection;
            import mx.core.FlexGlobals;
            import mx.events.FlexEvent;
            import mx.managers.PopUpManager;
            import mx.utils.StringUtil;
            
            import spark.events.IndexChangeEvent;
            import spark.events.PopUpEvent;
            
            import dictionary.Const;
            
            import events.EmployeeListEvent;
            
            import facade.ProtoFacade;
            
            import mediator.ProfListMediator;
            
            import vo.EmployeeVO;
            import vo.ProfessionDescVO;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
            [Bindable]
            public var professionsList:ArrayCollection;
            
            public var hireNewEmployeeAvailable:Boolean = false;
            
            protected var _profListMediator:ProfListMediator;
            
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
            
            public function moveEmployee(employeePersonId:String):void
            {
                placeEmployeePopUp.selectedBase = _profListMediator.getEmployeePlace(employeePersonId);
                placeEmployeePopUp.basesList = _profListMediator.basesDataProvider;
                placeEmployeePopUp.employeeId = employeePersonId;
                placeEmployeePopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                PopUpManager.centerPopUp(placeEmployeePopUp);
            }
            
            protected function creationCompleteHandler(event:FlexEvent):void
            {
                _profListMediator = ProfListMediator(ProtoFacade.getInstance().retrieveMediator(ProfListMediator.NAME));
                _profListMediator.setViewComponent(this);
            }
			
			protected function hireEmploye_clickHandler(event:MouseEvent):void
			{
                if (hireNewEmployeeAvailable)
                {
                    hireEmployePopUp.professionsList = professionsList;
                    hireEmployePopUp.defaultProfession = ProfessionDescVO.LABORER;
                    hireEmployePopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                    PopUpManager.centerPopUp(hireEmployePopUp);
                }
                else
                {
                    alertPopUp.text = resourceManager.getString("common", "alert.noroom");
                    alertPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                    PopUpManager.centerPopUp(alertPopUp);
                }
			}
			
			protected function employeCategoriesView_changeHandler(event:IndexChangeEvent):void
			{
				switch (employeCategoriesView.selectedItem.professionId)
				{
					case ProfessionDescVO.LABORER:
						break;
					case ProfessionDescVO.SOLGIER:
						break;
					case ProfessionDescVO.SCIENTIST:
						break;
					case ProfessionDescVO.ENGENEER:
						break;
				}
			}
			
            private function hireEmployePopUp_closeHandler(event:PopUpEvent):void
            {
                if (event.data == Const.OK)
                {
                    var name:String = StringUtil.trim(hireEmployePopUp.employeeNameInput.text);
                    var prof:uint = hireEmployePopUp.profSelector.selectedItem ?
                        hireEmployePopUp.profSelector.selectedItem.professionId : ProfessionDescVO.LABORER;
                    
                    dispatchEvent(new EmployeeListEvent(EmployeeListEvent.CREATE_PERSON, Const.NO_GUID, name, null, Const.MALE, prof));
                }
            }
            
            private function placeEmployeePopUp_closeHandler(event:PopUpEvent):void
            {
                var employeeId:String = placeEmployeePopUp.employeeId ? placeEmployeePopUp.employeeId : Const.NO_GUID;
                var baseId:String = placeEmployeePopUp.baseSelector.selectedItem ? placeEmployeePopUp.baseSelector.selectedItem.baseId : Const.NO_GUID;
                
                dispatchEvent(new EmployeeListEvent(EmployeeListEvent.PLACE_EMPLOYEE, employeeId, null, null, Const.MALE, ProfessionDescVO.LABORER, baseId));
            }
        ]]>
	</fx:Script>
</s:View>
