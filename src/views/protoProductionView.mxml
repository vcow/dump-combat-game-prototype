<?xml version="1.0" encoding="utf-8"?>

<!-- UI производства -->

<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:modal="views.modal.*"
		title="@Resource(key='production.title', bundle='common')"
		creationComplete="creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<s:navigationContent>
		<s:Button label="&lt;" click="{navigator.popView();}"/>
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button label="+" click="startNewProd_clickHandler(event)"/>
	</s:actionContent>
	
	<s:List id="prodListView" verticalScrollPolicy="on" horizontalScrollPolicy="off"
			width="100%" height="100%" change="prodListView_changeHandler(event)"
			dataProvider="{productionsList}">
        <s:itemRenderer>
            <fx:Component>
                <s:LabelItemRenderer>
                    <fx:Script>
                        <![CDATA[
                            import facade.ProtoFacade;
                            
                            import proxy.ProductionsProxy;
                            
                            override public function set data(value:Object):void
                            {
                                super.data = value;
                                if (data)
                                {
                                    if (data.complete)
                                    {
                                        setStyle("alternatingItemColors", 0xffffff);
                                        setStyle("color", 0x000000);
                                    }
                                    else
                                    {
                                        var numEngineers:int = ProductionsProxy(ProtoFacade.getInstance().retrieveProxy(ProductionsProxy.NAME)).getEmployedEngineers(data.id).length;
                                        setStyle("alternatingItemColors", numEngineers > 0 ? 0xa3d39c : 0xff7777);
                                        setStyle("color", numEngineers > 0 ? 0x005e20 : 0x6b0000);
                                    }
                                }
                            }
                        ]]>
                    </fx:Script>
                </s:LabelItemRenderer>
            </fx:Component>
        </s:itemRenderer>
    </s:List>
	
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("common")]
        [Event(name="startProduction", type="events.ProductionEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
            import views.ui.ProductionView;
            import mx.collections.ArrayCollection;
            import mx.core.FlexGlobals;
            import mx.events.FlexEvent;
            import mx.managers.PopUpManager;
            
            import spark.events.IndexChangeEvent;
            import spark.events.PopUpEvent;
            
            import dictionary.Const;
            
            import events.ProductionEvent;
            
            import facade.ProtoFacade;
            
            import helpers.ModulesHelper;
            import helpers.ProductionsHelper;
            
            import mediator.ProductionListMediator;
            
            import views.modal.AlertPopUp;
            import views.modal.StartProductionPopUp;
            
            import vo.ModuleDescVO;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
			[Bindable]
			public var productionsList:ArrayCollection;
            
            private var _productionMediator:ProductionListMediator;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
                _productionMediator = ProductionListMediator(ProtoFacade.getInstance().retrieveMediator(ProductionListMediator.NAME));
                _productionMediator.setViewComponent(this);
                
                updateList();
			}
			
			protected function prodListView_changeHandler(event:IndexChangeEvent):void
			{
                var production:Object = productionsList.getItemAt(event.newIndex);
                if (production && production.hasOwnProperty("id"))
                    navigator.pushView(ProductionView, production.id);
			}
            
            public function updateList():void
            {
                productionsList = _productionMediator.getActiveProductions();
            }
			
			protected function startNewProd_clickHandler(event:MouseEvent):void
			{
                var availableProd:ArrayCollection = _productionMediator.getAvailableProductions();
                if (!availableProd || availableProd.length <= 0)
                {
                    var alertPopUp:AlertPopUp = new AlertPopUp();
                    alertPopUp.text = resourceManager.getString("common", "alert.noproductions");
                    alertPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                    PopUpManager.centerPopUp(alertPopUp);
                    return;
                }
                
                var freeWorkshopSpace:int = (new ModulesHelper()).getSpace(ModuleDescVO.WORKSHOP);
                if (freeWorkshopSpace <= 0)
                {
                    alertPopUp = new AlertPopUp();
                    alertPopUp.text = resourceManager.getString("common", "alert.noworkshop");
                    alertPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                    PopUpManager.centerPopUp(alertPopUp);
                    return;
                }
                
                var freeEngineers:int = (new ProductionsHelper()).getFreeEngineers().length;
                if (freeEngineers <= 0)
                {
                    alertPopUp = new AlertPopUp();
                    alertPopUp.text = resourceManager.getString("common", "alert.noengineers");
                    alertPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                    PopUpManager.centerPopUp(alertPopUp);
                    return;
                }
                
                var startProductionPopUp:StartProductionPopUp = new StartProductionPopUp();
                startProductionPopUp.addEventListener(PopUpEvent.CLOSE, startProductionPopUp_closeHandler);
                
                startProductionPopUp.productionsList = availableProd;
                startProductionPopUp.freeEngineers = Math.min(freeEngineers, freeWorkshopSpace);
                
                startProductionPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                PopUpManager.centerPopUp(startProductionPopUp);
			}
            
            protected function startProductionPopUp_closeHandler(event:PopUpEvent):void
            {
                var startProductionPopUp:StartProductionPopUp = StartProductionPopUp(event.target);
                startProductionPopUp.removeEventListener(PopUpEvent.CLOSE, startProductionPopUp_closeHandler);
                
                if (event.data == Const.OK && startProductionPopUp.prodSelector.selectedItem)
                {
                    dispatchEvent(new ProductionEvent(ProductionEvent.START_PRODUCTION,
                        startProductionPopUp.prodSelector.selectedItem.id, startProductionPopUp.engineersCtr.value,
                        startProductionPopUp.productsCtr.value));
                }
            }
		]]>
	</fx:Script>
</s:View>
