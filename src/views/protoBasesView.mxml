<?xml version="1.0" encoding="utf-8"?>

<!-- UI создания новых баз и доступа к уже существующим -->

<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		title="@Resource(key='bases.title', bundle='common')"
		creationComplete="creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<s:navigationContent>
		<s:Button label="&lt;" click="{navigator.popView();}"/>
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button label="+" enabled="{buildNewBaseAvailable}"
				  click="buildNewBase_clickHandler(event)"/>
	</s:actionContent>
	
	<s:List id="basesListView" verticalScrollPolicy="on" horizontalScrollPolicy="off"
			width="100%" height="100%" change="basesListView_changeHandler(event)"
			dataProvider="{basesList}" labelField="baseName"/>
	
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="createBase", type="events.BasesListEvent")]
		[Event(name="rename", type="events.BaseEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			import dictionary.Const;
			
			import events.BaseEvent;
			import events.BasesListEvent;
			
			import facade.ProtoFacade;
			
			import mediator.BasesListMediator;
			
			import views.modal.CreateBasePopUp;
			import views.modal.RenameBasePopUp;
			
			import vo.BaseVO;
			import vo.RuinVO;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
			[Bindable]
			public var buildNewBaseAvailable:Boolean = false;
			
			[Bindable]
			public var basesList:ArrayCollection = new ArrayCollection();
			
			protected var _basesListMediator:BasesListMediator;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
			/**
			 * Открыть интерфейс для переименования базы
			 * @param baseVO база, которую следует переименовать
			 */
			public function renameBase(baseVO:BaseVO):void
			{
				if (baseVO)
				{
					var renameBasePopUp:RenameBasePopUp = RenameBasePopUp(PopUpManager.createPopUp(
						DisplayObject(FlexGlobals.topLevelApplication), RenameBasePopUp, true));
					renameBasePopUp.addEventListener(CloseEvent.CLOSE, renameBasePopUp_closeHandler);
					renameBasePopUp.baseName = baseVO.baseName;
					renameBasePopUp.baseId = baseVO.baseId;
					PopUpManager.centerPopUp(renameBasePopUp);
				}
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_basesListMediator = ProtoFacade.getInstance().retrieveMediator(BasesListMediator.NAME) as BasesListMediator;
				
				if (!_basesListMediator)
					throw Error("Bases List Mediator must be specified.");
				
				_basesListMediator.setViewComponent(this);
			}
			
			protected function basesListView_changeHandler(event:IndexChangeEvent):void
			{
				
			}
			
			protected function buildNewBase_clickHandler(event:MouseEvent):void
			{
				var createBasePopUp:CreateBasePopUp = CreateBasePopUp(PopUpManager.createPopUp(
					DisplayObject(FlexGlobals.topLevelApplication), CreateBasePopUp, true));
				createBasePopUp.addEventListener(CloseEvent.CLOSE, createBasePopUp_closeHandler);
				createBasePopUp.ruinsList = _basesListMediator.ruinsDataProvider;
				PopUpManager.centerPopUp(createBasePopUp);
			}
			
			private function createBasePopUp_closeHandler(event:CloseEvent):void
			{
				var createBasePopUp:CreateBasePopUp = CreateBasePopUp(event.target);
				PopUpManager.removePopUp(createBasePopUp);
				createBasePopUp.removeEventListener(CloseEvent.CLOSE, createBasePopUp_closeHandler);
				
				if (event.detail == Const.OK)
				{
					var ruinVO:RuinVO = createBasePopUp.ruinsListView.selectedItem as RuinVO;
					if (ruinVO)
					{
						// Создать базу на основе выбранных руин
						dispatchEvent(new BasesListEvent(BasesListEvent.CREATE_BASE, ruinVO));
					}
				}
			}
			
			private function renameBasePopUp_closeHandler(event:CloseEvent):void
			{
				var renameBasePopUp:RenameBasePopUp = RenameBasePopUp(event.target);
				PopUpManager.removePopUp(renameBasePopUp);
				renameBasePopUp.removeEventListener(CloseEvent.CLOSE, renameBasePopUp_closeHandler);
				
				if (event.detail == Const.OK)
				{
					// Переименовать базу
					dispatchEvent(new BaseEvent(BaseEvent.RENAME, renameBasePopUp.baseId, renameBasePopUp.baseNameInput.text));
				}
			}
		]]>
	</fx:Script>
</s:View>
