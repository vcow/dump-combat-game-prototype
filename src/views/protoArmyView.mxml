<?xml version="1.0" encoding="utf-8"?>

<!-- UI армии -->

<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:modal="views.modal.*"
		title="@Resource(key='army.title', bundle='common')"
		creationComplete="creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<s:navigationContent>
		<s:Button label="&lt;" click="{navigator.popView();}"/>
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button label="+" click="createUnit_clickHandler(event)"/>
	</s:actionContent>
	
	<s:List id="unitsListView" verticalScrollPolicy="on" horizontalScrollPolicy="off"
			width="100%" height="100%" change="unitsListView_changeHandler(event)"
			dataProvider="{unitsList}"/>
	
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("common")]
        [Event(name="equip", type="events.ArmyEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
            import mx.collections.ArrayCollection;
            import mx.core.FlexGlobals;
            import mx.events.FlexEvent;
            import mx.managers.PopUpManager;
            
            import spark.events.IndexChangeEvent;
            import spark.events.PopUpEvent;
            
            import dictionary.Const;
            
            import events.ArmyEvent;
            
            import facade.ProtoFacade;
            
            import helpers.ModulesHelper;
            import helpers.PersonnelHelper;
            
            import mediator.ArmyMediator;
            
            import proxy.BasesListProxy;
            
            import views.modal.AlertPopUp;
            import views.modal.EquipUnitPopUp;
            import views.ui.UnitView;
            
            import vo.BaseVO;
            import vo.ModuleDescVO;
            
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
			[Bindable]
			public var unitsList:ArrayCollection;
            
            private var _armyMediator:ArmyMediator;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
            private function equipUnit_equipUnitSelectedHandler(event:ArmyEvent):void
            {
                var equipUnit:EquipUnitPopUp = EquipUnitPopUp(event.target);
                
                equipUnit.soldierList = _armyMediator.getSoldiers();
                equipUnit.basesList = _armyMediator.getBases();
                equipUnit.unitName = _armyMediator.generateName(event.unitId);
            }
            
            private function equipUnit_closeHandler(event:PopUpEvent):void
            {
                var equipUnit:EquipUnitPopUp = EquipUnitPopUp(event.target);
                
                equipUnit.removeEventListener(ArmyEvent.EQUIP_UNIT_SELECTED, equipUnit_equipUnitSelectedHandler);
                equipUnit.removeEventListener(PopUpEvent.CLOSE, equipUnit_closeHandler);
                
                if (event.data == Const.OK)
                {
                    var basesListProxy:BasesListProxy = BasesListProxy(ProtoFacade.getInstance().retrieveProxy(BasesListProxy.NAME));
                    var personnelDecor:PersonnelHelper = new PersonnelHelper(basesListProxy);
                    var sidePersons:Array = [];     // Персонажи, которые нанимаются на базу со стороны
                    
                    for each (var person:String in equipUnit.crew)
                    {
                        var base:BaseVO = personnelDecor.getEmployeePlace(person);
                        if (!base || base.baseId != equipUnit.base)
                            sidePersons.push(person);
                    }
                    
                    if ((new ModulesHelper(basesListProxy)).getSpace(ModuleDescVO.HOUSING, basesListProxy.getBase(equipUnit.base) as BaseVO) < sidePersons.length)
                    {
                        // Не хватает жилья для экипажа
                        var alertPopUp:AlertPopUp = new AlertPopUp();
                        alertPopUp.text = resourceManager.getString("common", "alert.nospace.for.crew");
                        alertPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                        PopUpManager.centerPopUp(alertPopUp);
                        return;
                    }
                    
                    dispatchEvent(new ArmyEvent(ArmyEvent.EQUIP, equipUnit.unitId, equipUnit.nameTextInput.text, equipUnit.crew, equipUnit.base));
                }
            }
            
            //--------------------------------------------------------------------------
            // 
            //--------------------------------------------------------------------------
            
			protected function creationCompleteHandler(event:FlexEvent):void
			{
                _armyMediator = ArmyMediator(ProtoFacade.getInstance().retrieveMediator(ArmyMediator.NAME));
                _armyMediator.setViewComponent(this);
                
                updateList();
			}
			
			protected function unitsListView_changeHandler(event:IndexChangeEvent):void
			{
                var unit:Object = unitsList.getItemAt(event.newIndex);
                if (unit && unit.hasOwnProperty("id"))
                    selectUnit(unit.id);
			}
            
            public function updateList():void
            {
                unitsList = _armyMediator.getUnits();
            }
            
            public function selectUnit(unitId:String):void
            {
                navigator.pushView(UnitView, unitId);
            }
			
			protected function createUnit_clickHandler(event:MouseEvent):void
			{
                var units:ArrayCollection = _armyMediator.getAvailableUnits();
                
                if (units.length > 0)
                {
                    var equipUnit:EquipUnitPopUp = new EquipUnitPopUp();
                    equipUnit.addEventListener(ArmyEvent.EQUIP_UNIT_SELECTED, equipUnit_equipUnitSelectedHandler);
                    equipUnit.addEventListener(PopUpEvent.CLOSE, equipUnit_closeHandler);
                    equipUnit.unitList = units;
                    equipUnit.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                    PopUpManager.centerPopUp(equipUnit);
                }
                else
                {
                    var alertPopUp:AlertPopUp = new AlertPopUp();
                    alertPopUp.text = resourceManager.getString("common", "alert.nounits");
                    alertPopUp.open(DisplayObjectContainer(FlexGlobals.topLevelApplication), true);
                    PopUpManager.centerPopUp(alertPopUp);
                }
			}
		]]>
	</fx:Script>
</s:View>
