<?xml version="1.0" encoding="utf-8"?>

<!-- Интерфейс для создания новой базы -->

<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   xmlns:ui="views.ui.*"
                           xmlns:dropDownList="com.flextras.mobile.dropDownList.*"
						   creationComplete="creationCompleteHandler(event)"
                           filters="{proto.popUpShadow}"
                           currentState="normal">
    <s:states>
        <s:State name="normal"/>
        <s:State name="woPrice"/>
    </s:states>
	
	<s:BorderContainer>
		<s:layout>
			<s:VerticalLayout gap="10" paddingBottom="1" paddingLeft="1" paddingRight="1"
							  paddingTop="1"/>
		</s:layout>
		
		<s:BorderContainer width="100%" minHeight="0" backgroundColor="gray" borderVisible="false">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingLeft="5"
								  paddingRight="5" paddingTop="5"/>
			</s:layout>
			
			<s:Label color="white" text="@Resource(key='new.base.popup.title', bundle='common')"/>
		</s:BorderContainer>

		<s:VGroup width="100%" gap="10" horizontalAlign="center" paddingBottom="5" paddingLeft="5"
				  paddingRight="5" paddingTop="5">
			
			<s:VGroup width="100%" gap="3" horizontalAlign="center">
				<s:Label text="@Resource(key='new.base.popup.place', bundle='common')"/>
				
                <dropDownList:DropDownList id="ruinsSelector" width="100%"
                                           change="ruinsSelector_changeHandler(event)"
                                           labelFunction="ruinsListLabelFunction"/>
			</s:VGroup>
			
			<s:VGroup gap="3" horizontalAlign="center" includeIn="normal">
				<s:Label text="@Resource(key='new.base.popup.price', bundle='common')"/>
				
				<ui:PriceView width="100%" price="{price}"/>
			</s:VGroup>
			
			<s:HGroup width="100%">
				<s:Button width="50%" label="@Resource(key='new.base.popup.create', bundle='common')"
						  click="{close(false, Const.OK);}"
						  enabled="{ruinsSelector.selectedItem != null}"/>
				
				<s:Button width="50%" label="@Resource(key='alert.cancel', bundle='common')"
						  click="{close(false, Const.CANCEL);}"/>
			</s:HGroup>
		</s:VGroup>
		
		<ui:SimpleResourcesView logButtonVisible="false"/>
	</s:BorderContainer>
	
	<fx:Declarations>
	</fx:Declarations>
    
    <fx:Metadata>
        [ResourceBundle("common")]
    </fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			import dictionary.BasesDict;
			import dictionary.Const;
			
			import vo.BaseTemplVO;
			import vo.PriceVO;
			import vo.RuinVO;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
			private var _ruinsList:ArrayCollection;
            private var _selectedRuin:String;
			
			[Bindable]
			private var price:PriceVO;
			
			//--------------------------------------------------------------------------
			// 
			//--------------------------------------------------------------------------
			
			public function set ruinsList(value:ArrayCollection):void
			{
				if (value == _ruinsList)
					return;
				
				_ruinsList = value;
                updateRuinsSelector();
			}
            
            public function set selectedRuin(value:String):void
            {
                if (value == _selectedRuin)
                    return;
                
                _selectedRuin = value;
                updateRuinsSelector();
            }
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
                ruinsSelector.dataProvider = _ruinsList;
                updateRuinsSelector();
			}
			
			protected function ruinsSelector_changeHandler(event:IndexChangeEvent):void
			{
				var ruin:RuinVO = ruinsSelector.selectedItem as RuinVO;
				var base:BaseTemplVO = ruin ? BasesDict.getInstance().getBase(ruin.ruinId) : null;
				price = base && base.baseRuin ? base.baseRuin.ruinRepairPrice : null;
			}
			
			private function ruinsListLabelFunction(item:Object):String
			{
				var ruin:RuinVO = item as RuinVO;
				var base:BaseTemplVO = ruin ? BasesDict.getInstance().getBase(ruin.ruinId) : null;
				return base && base.baseRuin ? base.baseRuin.ruinName : Const.NO_TEXT;
			}
            
            private function updateRuinsSelector():void
            {
                if (!initialized || !_ruinsList)
                    return;
                
                var selectedIndex:int = _ruinsList.length > 0 ? 0 : -1;
                if (_selectedRuin)
                {
                    for (var i:int = 0; i < _ruinsList.length; i++)
                    {
                        if (_ruinsList[i].ruinId == _selectedRuin)
                        {
                            selectedIndex = i;
                            break;
                        }
                    }
                }
                
                ruinsSelector.selectedIndex = selectedIndex;
                ruinsSelector_changeHandler(null);
            }
		]]>
	</fx:Script>
</s:SkinnablePopUpContainer>
